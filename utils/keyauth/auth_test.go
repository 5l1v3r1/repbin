package keyauth

import (
	"golang.org/x/crypto/curve25519"
	"testing"
	"time"
)

func TestGenTempKey(t *testing.T) {
	privkey := [PrivateKeySize]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0xaf, 0xff}
	testPriv := [PrivateKeySize]byte{0x00, 0x00, 0x03, 0x03, 0x03, 0x06, 0x07, 0x08, 0x09, 0x07, 0x07, 0x07, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0xaf, 0xff}
	testPriv2 := [PrivateKeySize]byte{0x01, 0x02, 0x03, 0x03, 0x03, 0x06, 0x07, 0x08, 0x09, 0x07, 0x07, 0x07, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0xaf, 0xff}
	testPub := [PublicKeySize]byte{}
	testPub2 := [PublicKeySize]byte{}
	curve25519.ScalarBaseMult(&testPub, &testPriv)
	curve25519.ScalarBaseMult(&testPub2, &testPriv2)
	serverPriv, serverPub, challenge := GenTempKeyTime(uint64(time.Now().Unix()), &privkey)
	_, _, _ = serverPriv, serverPub, challenge
	answer := Answer(challenge, &testPriv)
	ok := Verify(answer, &privkey, &testPub)
	if !ok {
		t.Error("Verification failed")
	}
	ok = Verify(answer, &privkey, &testPub2)
	if ok {
		t.Error("Verification must fail 1")
	}
	answer = Answer(challenge, &testPriv2)
	ok = Verify(answer, &privkey, &testPub)
	if ok {
		t.Error("Verification must fail 2")
	}
	if !VerifyTimeNow(answer, 1) {
		t.Error("Time verification failed")
	}
	answer[0] = 0x01 // bad time
	if VerifyTimeNow(answer, 1) {
		t.Error("Time verification must fail")
	}
}
